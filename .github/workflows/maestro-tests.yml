name: Maestro UI Tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  MAESTRO_ENV_FILE: .env.uz
  MAESTRO_RESULTS_DIR: maestro-results

jobs:
  android:
    name: Android UI tests
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Reset adb daemon
        run: |
          set -euxo pipefail
          ADB_BIN="${ANDROID_SDK_ROOT:-$HOME/Library/Android/sdk}/platform-tools/adb"
          if [[ -x "$ADB_BIN" ]]; then
            export PATH="$(dirname "$ADB_BIN"):$PATH"
          fi
          if ! command -v adb >/dev/null 2>&1; then
            echo "adb binary not found on PATH before emulator start; installing platform-tools." >&2
            yes | "${ANDROID_SDK_ROOT:-$HOME/Library/Android/sdk}"/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
            export PATH="${ANDROID_SDK_ROOT:-$HOME/Library/Android/sdk}/platform-tools:$PATH"
          fi
          adb kill-server || true
          adb start-server

      - name: Run Maestro suite (Android)
        env:
          AVD_NAME: maestro-avd
          ANDROID_API: "33"
        run: |
          set -euxo pipefail
          APK_PATH="app/app.apk"
          if [[ ! -f "$APK_PATH" ]]; then
            echo "Expected Android APK at $APK_PATH. Ensure the file is committed or adjust the workflow." >&2
            exit 1
          fi

          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$HOME/Library/Android/sdk}"
          export PATH="$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator:$PATH"

          CMDLINE_BIN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
          yes | "$CMDLINE_BIN/sdkmanager" --licenses >/dev/null
          "$CMDLINE_BIN/sdkmanager" --install \
            "platform-tools" \
            "emulator" \
            "system-images;android-${ANDROID_API};google_apis;x86_64" >/dev/null

          adb kill-server || true
          adb start-server

          "$CMDLINE_BIN/avdmanager" delete avd -n "$AVD_NAME" || true
          echo no | "$CMDLINE_BIN/avdmanager" create avd --force \
            -n "$AVD_NAME" \
            --abi "google_apis/x86_64" \
            --package "system-images;android-${ANDROID_API};google_apis;x86_64" \
            --device "pixel_6"

          EMULATOR_PORT=5554
          EMULATOR_CMD=(
            emulator
            -port "${EMULATOR_PORT}"
            -avd "$AVD_NAME"
            -no-snapshot
            -noaudio
            -no-boot-anim
            -gpu swiftshader_indirect
            -no-metrics
            -no-window
            -skip-adb-auth
          )

          echo "Starting emulator: ${EMULATOR_CMD[*]}"
          rm -f emulator.log
          "${EMULATOR_CMD[@]}" > emulator.log 2>&1 &
          EMULATOR_PID=$!
          cleanup() {
            adb -s "emulator-${EMULATOR_PORT}" emu kill >/dev/null 2>&1 || true
            if ps -p "$EMULATOR_PID" >/dev/null 2>&1; then
              kill "$EMULATOR_PID" >/dev/null 2>&1 || true
            fi
          }
          trap cleanup EXIT

          echo "Waiting for emulator to appear in adb..."
          SERIAL=""
          for attempt in $(seq 1 60); do
            SERIAL="$(adb devices | awk '/emulator-/{print $1; exit}')"
            if [[ -n "$SERIAL" ]]; then
              echo "Detected emulator serial: $SERIAL"
              adb -s "$SERIAL" wait-for-device
              STATE="$(adb -s "$SERIAL" get-state || true)"
              if [[ "$STATE" == "device" ]]; then
                break
              fi
            fi
            sleep 5
          done

          if [[ -z "$SERIAL" ]]; then
            echo "Emulator never appeared in adb devices output." >&2
            cat emulator.log || true
            exit 1
          fi

          echo "Waiting for emulator to report boot completed..."
          BOOT=""
          for attempt in $(seq 1 60); do
            BOOT="$(adb -s "$SERIAL" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')"
            if [[ "$BOOT" == "1" ]]; then
              echo "Emulator reported boot complete."
              break
            fi
            sleep 5
          done

          if [[ "$BOOT" != "1" ]]; then
            echo "Emulator did not finish booting in expected time." >&2
            cat emulator.log || true
            adb -s "$SERIAL" shell getprop sys.boot_completed || true
            adb -s "$SERIAL" shell dumpsys activity activities | head -n 100 || true
            exit 1
          fi

          adb -s "$SERIAL" shell input keyevent 82 || true

          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$HOME/.maestro/bin:$PATH"
          maestro --version
          mkdir -p "$MAESTRO_RESULTS_DIR/android"
          maestro test \
            --format junit \
            --output "$MAESTRO_RESULTS_DIR/android" \
            --app "$APK_PATH" \
            @"$MAESTRO_ENV_FILE" \
            .maestro/

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-android
          path: maestro-results/android
          if-no-files-found: ignore

  ios:
    name: iOS UI tests
    runs-on: macos-latest
    env:
      IOS_APP_SOURCE: ${{ vars.IOS_APP_SOURCE != '' && vars.IOS_APP_SOURCE || 'app/ios.app.zip' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Maestro CLI
        run: |
          set -euxo pipefail
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> "$GITHUB_PATH"
          maestro --version

      - name: Prepare iOS binary
        run: |
          set -euxo pipefail
          INPUT="$IOS_APP_SOURCE"
          if [[ "$INPUT" == http* ]]; then
            curl -L "$INPUT" -o ios-app.zip
            INPUT="ios-app.zip"
          fi

          if [[ ! -e "$INPUT" ]]; then
            echo "Expected iOS binary at '$INPUT'. Provide IOS_APP_SOURCE via repository variable or commit the file." >&2
            exit 1
          fi

          if [[ "$INPUT" == *.zip || "$INPUT" == *.ipa ]]; then
            unzip -qo "$INPUT" -d ios-app
            APP_PATH=$(find ios-app -type d -name "*.app" | head -n 1)
            if [[ -z "$APP_PATH" ]]; then
              echo "Unable to locate .app bundle after extracting '$INPUT'." >&2
              exit 1
            fi
            echo "IOS_APP_PATH=$APP_PATH" >> "$GITHUB_ENV"
          else
            echo "IOS_APP_PATH=$INPUT" >> "$GITHUB_ENV"
          fi

      - name: Boot iOS simulator
        env:
          SIM_DEVICE: ${{ vars.IOS_SIMULATOR_DEVICE != '' && vars.IOS_SIMULATOR_DEVICE || 'iPhone 15' }}
        run: |
          set -euxo pipefail
          RUNTIME=$(xcrun simctl list runtimes | awk -F'[()]' '/iOS/ && /com.apple.CoreSimulator.SimRuntime.iOS/ {print $2; exit}')
          if [[ -z "$RUNTIME" ]]; then
            echo "No iOS runtime found on the runner." >&2
            exit 1
          fi

          DEVICE_TYPE=$(xcrun simctl list devicetypes | awk -F'[()]' -v name="$SIM_DEVICE" '$1 ~ name {print $2; exit}')
          if [[ -z "$DEVICE_TYPE" ]]; then
            DEVICE_TYPE=$(xcrun simctl list devicetypes | awk -F'[()]' '/iPhone/ {print $2; exit}')
          fi

          SIMULATOR_ID=$(xcrun simctl create MaestroTest "$DEVICE_TYPE" "$RUNTIME")
          xcrun simctl boot "$SIMULATOR_ID"
          xcrun simctl bootstatus "$SIMULATOR_ID" -b
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> "$GITHUB_ENV"

      - name: Run Maestro suite (iOS)
        run: |
          set -euxo pipefail
          export PATH="$HOME/.maestro/bin:$PATH"
          mkdir -p "$MAESTRO_RESULTS_DIR/ios"
          maestro test \
            --format junit \
            --output "$MAESTRO_RESULTS_DIR/ios" \
            --app "$IOS_APP_PATH" \
            --device "$SIMULATOR_ID" \
            @"$MAESTRO_ENV_FILE" \
            .maestro/

      - name: Upload iOS artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-ios
          path: maestro-results/ios
          if-no-files-found: ignore
